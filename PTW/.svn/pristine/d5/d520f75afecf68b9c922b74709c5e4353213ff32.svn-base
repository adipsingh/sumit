using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Protocols;
using System.Configuration;
using MODS.PTW.Models;

namespace MODS.PTW.Helpers
{
    public class DataContext : DbContext
    {
        public DataContext(DbContextOptions<DataContext> options) : base(options) { }

        public static string GetConnectionString()
        {
            return Startup.ConnectionString;
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if(!optionsBuilder.IsConfigured)
            {
                var con = GetConnectionString();
                optionsBuilder.UseSqlServer(con);
            }
            
        }


       /* protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.Entity<UserRole>()
                .HasKey(bc => bc.Id);
            builder.Entity<UserRole>()
                .HasOne(bc => bc.User)
                .WithMany(b => b.Roles)
                .HasForeignKey(bc => bc.UserId);
            builder.Entity<UserRole>()
                .HasOne(bc => bc.Role)
                .WithMany(c => c.Users)
                .HasForeignKey(bc => bc.RoleId);


            builder.Entity<UserRole>()
               .HasIndex(u => new { u.RoleId, u.UserId })
               .IsUnique();
            builder.Entity<Role>()
              .HasIndex(u => u.Name)
              .IsUnique();
            builder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();
            builder.Entity<User>()
               .HasIndex(u => u.Username)
               .IsUnique();

            //seed data
            builder.Entity<Role>().HasData(
                new Role() { Id = 1, Name = "Administrator" },
                new Role() { Id = 2, Name = "User" }
            );

        }*/

        //public DbSet<User> Users { get; set; }
       // public DbSet<Role> Roles { get; set; }
       // public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Questionnarie> questionnaries { get; set; } 
        public DbSet<Image>images { get; set; } 
        public DbSet<EquipmentCatagory> EquipmentCatagory { get; set; }  
        public DbSet<WorkPermitStatus> WorkPermitStatus { get; set; }
        public DbSet<WorkPermitTypes> WorkPermitTypes { get; set; }
        public DbSet<UserAuthority> UserAuthorities { get; set; }
        public DbSet<CompanyCatagory> CompanyCategories { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Function> Functions { get; set; }
        public DbSet<Section> Sections { get; set; }
        public DbSet<Area> Areas { get; set; }
        public DbSet<Equipment> Equipments { get; set; }

    }
}